#!/usr/bin/python3

from __future__ import print_function

import sys
import string, unicodedata

from pprint import pprint
import csv

from collections import Counter, defaultdict
from math import log10

try:
    from argparse import ArgumentParser, REMAINDER
    using_optparse = False
except ImportError:
    from optparse import OptionParser as ArgumentParser
    using_optparse = True


VERSION='0.1'

def DEBUG(level, *msg, **args):
    end = args.get('end', '\n')
    if level<=debuglevel:
        print(*msg, file=sys.stderr, end=end)
        sys.stderr.flush()

colours = {
    'none'       :    "",
    'default'    :    "\033[0m",
    'bold'       :    "\033[1m",
    'underline'  :    "\033[4m",
    'blink'      :    "\033[5m",
    'reverse'    :    "\033[7m",
    'concealed'  :    "\033[8m",

    'black'      :    "\033[30m",
    'red'        :    "\033[31m",
    'green'      :    "\033[32m",
    'yellow'     :    "\033[33m",
    'blue'       :    "\033[34m",
    'magenta'    :    "\033[35m",
    'cyan'       :    "\033[36m",
    'white'      :    "\033[37m",

    'on_black'   :    "\033[40m",
    'on_red'     :    "\033[41m",
    'on_green'   :    "\033[42m",
    'on_yellow'  :    "\033[43m",
    'on_blue'    :    "\033[44m",
    'on_magenta' :    "\033[45m",
    'on_cyan'    :    "\033[46m",
    'on_white'   :    "\033[47m",

    'beep'       :    "\007",
}

# some default definitions

# colour of characters
colour_char = 'white'

# colour of unicode name
colour_name = 'red'

# colour of numbers, high count
colour_hi = 'red'

# colour of numbers, low count
colour_lo = 'blue'

# colour of number, medium count
colour_med = 'magenta'

# colour of invalid byte
colour_invalid = 'on_red'

# colour of control characters
colour_controlchar = 'green'

thr_hi = 0.08
thr_lo = 0.001

def hfnum(n):
    "human readable number"
    assert n >= 0
    if n == 0:
        return "0"
    units = [" ", "k", "M", "G", "T", "P", "Z", "Y"]
    power = int(log10(n)/3) # log10(1000)==3
    if power < 0:
        power = 0
    if power >= len(units):
        power = len(units)-1
    new = int(round(1.*n/(1000**power)))
    if new < 10 and power >= 1:
        power -= 1
        new = int(round(1.*n/(1000**power)))
    r = str(new) + units[power]
    return r


class FreqCounter:
    def __init__(self, stream, preprocessor=None):
        self.stream = stream
        self.counts = Counter()
        self.classes = Counter()
        self.contexts = {} # KWIC-like contexts for the given character
        self.total_chars = 0
        self.preprocessor = preprocessor

    def get_class(self, c):
        return '1'

    def get_context(self, c, pos, line):
        context_width = 3
        context_left = line[pos-context_width:pos]
        context_right = line[pos+len(c):pos+len(c)+context_width]
        return context_left, context_right


    def make_counts(self):
        for line in self.stream:
            if self.preprocessor:
                line = self.preprocessor(line)
            line = list(line)
            pos = 0
            for c in line:
                if c not in self.counts:
                    print (repr(c).replace("'", ""), file=sys.stderr, end='')
                    sys.stderr.flush()
                self.counts[c] += 1
                cls = self.get_class(c)
                self.classes[cls] += 1
                if c not in self.contexts:
                    self.contexts[c] = self.get_context(c, pos, line)
                pos += 1
        self.total_chars = sum(self.classes.values())
        print (file=sys.stderr)


class FreqCounterFile(FreqCounter):
    def __init__(self, fname, preprocessor=None):
        stream = open(fname, errors="surrogateescape")
        FreqCounter.__init__(self, stream, preprocessor)


def is_ascii(c):
    return all(32 <= ord(x) <= 127 for x in c)

def is_ɑnum(c):
    return all(x in string.ascii_letters + string.digits for x in c)

def is_ascii_control(c):
    return all(ord(x)<32 for x in c)

def is_invalid(c):
    "test if unicode character c is from an invalid utf-8, i.e. it is a lone surrogate"
    return all(0xdc80 <= ord(x) <= 0xdcff for x in c)

def combine_combining(txt):
    "yield a sequence of characters, putting combining diacritical marks together with the base letters"
    buff = ''
    for c in txt:
        if unicodedata.combining(c) and not is_invalid(c):
            buff += c
        else:
            if buff:
                yield buff
            buff = c
            # it does not make much sense to put combining characters over whitespace or control characters
            if unicodedata.category(c)[0] in 'ZC': 
                yield buff
                buff = ''
    if buff:
        yield buff

class CountsPrinterBasic():
    def __init__(self, freq_counter):
        self.freq_counter = freq_counter
        self.counts = freq_counter.counts
        self.contexts = freq_counter.contexts

class CountsPrinterPprint(CountsPrinterBasic):

    def print_counts(self, *args):
        pprint(self.counts)

class CountsPrinterCSV(CountsPrinterBasic):

    def print_counts(self, *args):
        writer = csv.writer(sys.stdout)
        for item in self.counts.items():
            # silently drop surrogates
            if not is_invalid(item[0]):
                writer.writerow(item)


def asian_like_len(txt):
    "return length of txt in character cells, taking into account fullwidth asian characters (two cells) and combining characters (no cell)"
    l = 0
    for c in txt:
        if unicodedata.combining(c):
            continue
        elif unicodedata.east_asian_width(c) in 'FW':
            l += 2
        else:
            l += 1
    return l


class CountsPrinterNice(CountsPrinterBasic):

    def print_escape(self, c):
        # assume unicode c, which can be composed of more characters
        r = ''
        for subc in c:
            if ord(subc) <= 32:
                r += '{:02X}'.format(ord(subc))
            # surrogate escape for invalid UTF-8
            elif is_invalid(subc):
                r += '{b:02X}'.format(b=ord(subc) & 0xff)
            elif unicodedata.category(subc)[0] == 'C':
                r += '<>' # control character
            else:
                # if the string begins with a combining character, prepend it with space
                if unicodedata.combining(subc) and not r:
                    r = ' '
                r += subc
        l = asian_like_len(r)
        padding = ' '*(2-l)
        r = padding + r
        return r

    def print_counts(self, options):
        items = self.counts.items()
        if options.sort == 'count':
            items = sorted(items, key=lambda x:x[1], reverse=False)
        if options.sort == 'count-':
            items = sorted(items, key=lambda x:x[1], reverse=True)
        elif options.sort == 'char':
            items = sorted(items)
        elif options.sort == 'char-':
            items = sorted(items, reverse=True)
        elif options.sort == 'hash':
            items = sorted(items, key=hash)
        clrr = colours['default'] # reset colour
        clrch = colours[colour_char]
        clr_ctrl = colours[colour_controlchar]
        clrch_invalid = colours[colour_invalid]
        clrnm = colours[colour_name]
        clr_lo = colours[colour_lo]
        clr_med = colours[colour_med]
        clr_hi = colours[colour_hi]
        for c, cnt in items:
            if options.hide_ascii and is_ascii(c):
                continue
            if options.hide_ɑnum and is_ɑnum(c):
                continue
            if options.hide_eol and c in '\r\n':
                continue
            c_esc = self.print_escape(c)
            context_left, context_right = self.contexts[c]
            context_left = ''.join(context_left)
            context_right = ''.join(context_right)
            cnt_f = hfnum(cnt)
            clr_thisch = clrch
            unirepr = '' # unicode representation U+xxxx
            if is_ascii_control(c) <= 32:
                clr_thisch = clr_ctrl
            if is_invalid(c):
                clr_thisch = clrch_invalid
                byte_ = ord(c) & 0xff
                name = 'invalid utf-8'
                if byte_ <= 0xbf:
                    cp8 = 'cp1252'
                else:
                    cp8 = 'iso8859-1'
                try:
                    in8bit = str(bytes([byte_]), cp8)
                    name += ', would be ‘{in8bit}’ in {cp8}'.format(**locals())
                except UnicodeDecodeError:
                    pass
            else:
                name = '; '.join(unicodedata.name(x, '') for x in c)
                unirepr = '; '.join('U+{:04X}'.format(ord(x)) for x in c)
                if unirepr:
                    unirepr += ' '
                if unicodedata.category(c[0])[0]=='C':
                    clr_thisch = clr_ctrl
            clrn = clr_med
            if cnt < self.freq_counter.total_chars * thr_lo:
                clrn = clr_lo
            elif self.freq_counter.total_chars * thr_hi < cnt:
                clrn = clr_hi
#            print('{clrn}{cnt_f:>5s}{clrr} {clr_thisch}{c_esc}{clrr} {context_left}{c_esc}{context_right} {clrnm}{unirepr}{name}{clrr}'.format(**locals()))
            print('{clrn}{cnt_f:>5s}{clrr} {clr_thisch}{c_esc}{clrr} {clrnm}{unirepr}{name}{clrr}'.format(**locals()))


available_printers = {
    'pprint': CountsPrinterPprint,
    'nice'  : CountsPrinterNice,
    'csv'   : CountsPrinterCSV,
    }


if __name__ == '__main__':

    parser = ArgumentParser(prog='charfreq',
            description='Display table of character frequencies from given text in a human readable form.')
    if using_optparse:
        DEBUG(3, 'using optparse')
        parser.add_argument = parser.add_option
        parser.parse_known_args = parser.parse_args
        parser.disable_interspersed_args()

    parser.add_argument('-v', dest='debuglevel', action='count',
                       default = 0,
                       help='Be verbose (repeat for more)')

    parser.add_argument('--type', dest='input_type', action='store',
                       type=str,
                       default = 'utf-8',
                       help='Type of input: utf-8 (the default), bytes, words')
    parser.add_argument("--hide-ascii", action="store_const", dest="hide_ascii",
                       const=True, default=False,
                       help="Hide printable ASCII characters from the output (but still count them)")
    parser.add_argument("--hide-ɑnum", "--hide-alphanum", "--hide-ascii-alphanum", action="store_const", dest="hide_ɑnum",
                       const=True, default=False,
                       help="Hide printable ASCII alphanumeric characters from the output (but still count them)")
    parser.add_argument("--hide-eol", action="store_const", dest="hide_eol",
                       const=True, default=False,
                       help="Hide end-of-line characters (\\r and \\n) from the output (but still count them)")
    parser.add_argument('--normalise', '--normalize', dest='normalise', action='store',
                       type=str,
                       default = '',
                       help='Normalize the text before processing - one of NFC, NFD, NFKC, NFKD')

    parser.add_argument('--split-combining', dest='combine_combining', action='store_const',
                       const=False, default=True,
                       help='Split combining diacritical characters from the base character for the purposes of tabular display. Default: do not split them.')
    parser.add_argument('--printer', dest='printer', action='store',
                       type=str,
                       default = 'nice',
                       help='Which way of printing the table to use. One of '+(', '.join( available_printers.keys() )))

    parser.add_argument('--colour', '--color', dest='use_colour', action='store',
                       type=str,
                       default = 'yes',
                       help='Use colour (with "nice" printer)')

    parser.add_argument('--sort', dest='sort', action='store',
                       type=str,
                       default = 'count-',
                       help='How to sort the results: char (by characters ascending), char- (by characters descending), count (by count ascending), count- (by count descending, the default), hash')


    if not using_optparse:
        parser.add_argument('--version', action='version',
                       version='%(prog)s '+VERSION)
        parser.add_argument('files', help='Files to process', default=None, nargs='*')
        #parser.add_argument('args', nargs=REMAINDER)

    args, rest = parser.parse_known_args()

    global debuglevel
    debuglevel = args.debuglevel
    DEBUG(3, 'args:', str(args))
    DEBUG(3, 'optparse:', using_optparse)

    input_type = args.input_type

    if 'files' in dir(args) and args.files:
#        print(repr(args.files), repr(args.args))
        #files = [args.files] + args.args # + ' '+ ' '.join(args.args)
        files = args.files
    else:
        files = rest
    DEBUG(1, 'files:', files)

    _preprocessor = preprocessor = None
    if args.normalise:
        _preprocessor = lambda x: unicodedata.normalize(args.normalise, x)

    if args.combine_combining:
        if _preprocessor:
            preprocessor = lambda x: combine_combining(_preprocessor(x))
        else:
            preprocessor = combine_combining
    elif _preprocessor:
        preprocessor = _preprocessor

    if not files:
        freq_counter = FreqCounter(stream=sys.stdin, preprocessor=preprocessor)
    else:
        freq_counter = FreqCounterFile(files[0], preprocessor=preprocessor)

    freq_counter.make_counts()
    counts_printer = available_printers[args.printer](freq_counter)
    if args.use_colour.lower() not in ('1', 'yes', 'true'):
        colours = defaultdict(lambda :'')
    counts_printer.print_counts(args)

